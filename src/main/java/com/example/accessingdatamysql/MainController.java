package com.example.accessingdatamysql;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import java.util.List;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;


@Controller // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private GarantieRepository garantieRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewGarantie (@RequestParam String nom
      , @RequestParam String description,@RequestParam int montant) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

	  Garantie n = new Garantie();
    n.setNom(nom);
    n.setDescription(description);
    n.setMontant(montant);
    garantieRepository.save(n);
    return "Saved";
  }

  @GetMapping(value = "/garantie/{id}")
  @ResponseBody
  public Optional<Garantie> GetGarantieById(@PathVariable int id){
      return garantieRepository.findById(id);
  }


  
  @GetMapping(path="/garantie")
  public @ResponseBody Iterable<Garantie> getAllGarantie() {
    // This returns a JSON or XML with the users
    return garantieRepository.findAll();
  }
 
 



@PutMapping("/garantie/{id}")
Garantie replaceGarantie(@RequestBody Garantie newGarantiee, @PathVariable int id) {

  return garantieRepository.findById(id).map(x -> {
      x.setNom(newGarantiee.getNom());
      x.setMontant(newGarantiee.getMontant());
      x.setDescription(newGarantiee.getDescription()
    		  );
      return garantieRepository.save(x);
    })
    .orElseGet(() -> {
    	newGarantiee.setId(id);
      return garantieRepository.save(newGarantiee);
    });
}


  
  @DeleteMapping("/garantie/{id}")
  void deleteGarantie(@PathVariable int id) {
	  garantieRepository.deleteById(id);
  }
}